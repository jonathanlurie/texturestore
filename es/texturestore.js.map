{"version":3,"file":"texturestore.js","sources":["../src/Chunk.js","../src/Tools.js","../src/ChunkCollection.js","../src/index.js"],"sourcesContent":["\n/**\n * Holds an object of type THREE.DataTexture3D as data\n */\nclass Chunk {\n  constructor(id, t) {\n    this._id = id\n    this._texture3D = t\n    this._metadata = {}\n    this._timestampCreated = Date.now()\n    this._timestampLastUse = 0\n  }\n\n\n  getId() {\n    return this._id\n  }\n\n\n  getTexture3D() {\n    this._timestampLastUse = Date.now()\n    return this._texture3D\n  }\n\n\n  getByteSize() {\n    return this._texture3D.image.data.byteLength\n  }\n\n\n  getTimestampLastUse() {\n    return this._timestampLastUse\n  }\n\n\n  addMetadata(k, v) {\n    this._metadata[k] = v\n  }\n\n\n  getMetadata(key=null) {\n    if(!key){\n      return this._metadata\n    }\n\n    if(key in this._metadata){\n      return this._metadata[key]\n    }\n\n    return null\n  }\n\n  destroy(){\n    //this._texture3D.image.data.length = 0\n    this._texture3D.image.data = null\n  }\n\n\n}\n\n\nexport default Chunk\n","/**\n * Handy function to deal with option object we pass in argument of function.\n * Allows the return of a default value if the `optionName` is not available in\n * the `optionObj`\n * @param {Object} optionObj - the object that contain the options\n * @param {String} optionName - the name of the option desired, attribute of `optionObj`\n * @param {any} optionDefaultValue - default values to be returned in case `optionName` is not an attribute of `optionObj`\n */\nexport function getOption(optionObj, optionName, optionDefaultValue) {\n  return (optionObj && optionName in optionObj) ? optionObj[optionName] : optionDefaultValue\n}\n","import Chunk from './Chunk'\nimport { getOption } from './Tools'\n\nclass ChunkCollection {\n\n  /**\n   * @param {Object} options - the option object\n   * @param {number} options.maxSizeMegaByte - Maximum size of the whole colelction in MB (default: 500)\n   * @param {number} options.cleaningThreshold - When the max is reached, the cleaning is done until the total size is just under `maxSizeMegaByte * cleaningThreshold` (default: 0.8)\n   */\n  constructor(options={}) {\n    this._collection = {}\n    this._maxByteSize = getOption(options, 'maxSizeMegaByte', 500) * 1024 * 1024\n    this._thresholdByteSize = this._maxByteSize * getOption(options, 'cleaningThreshold', 0.8)\n    this._totalByteSize = 0\n  }\n\n  getTotalByteSize(force=false) {\n    if(force) {\n      this._computeByteSize()\n    }\n\n    return this._totalByteSize\n  }\n\n\n  getNumberOfElements() {\n    return Object.keys(this._collection).length\n  }\n\n\n  createChunk(id, texture3D) {\n    let t = new Chunk(id, texture3D)\n    this._collection[id] = t\n    this._totalByteSize += texture3D.image.data.byteLength\n\n    if(this._totalByteSize > this._maxByteSize) {\n      this._clean()\n    }\n    //console.log(~~(this._totalByteSize / 1024**2) + ' MB')\n    return t\n  }\n\n\n  deleteChunk(id) {\n    if(id in this._collection) {\n      this._totalByteSize -= this._collection[id].getByteSize()\n      this._collection[id].destroy()\n      delete this._collection[id]\n    }\n  }\n\n\n  getChunk(id) { \n    if(id in this._collection) {\n      return this._collection[id]\n    } else {\n      return null\n    }\n  }\n\n\n  hasChunk(id) {\n    return (id in this._collection)\n  }\n\n\n  _getAllTimestampLastUse() {\n    let that = this\n    // return Object.keys(this._collection)\n    // .map(function (k) {\n    //   return {\n    //     id: k,\n    //     timestampLastUse: that._collection[k].getTimestampLastUse()\n    //   }\n    // })\n    // .sort((a, b) => a.timestampLastUse - a.timestampLastUse)\n\n    let ids = Object.keys(this._collection)\n    let idTs = new Array(ids.length)\n    for(let i=0; i<idTs.length; i++){\n      let id = ids[i]\n      idTs[i] = {\n        id: id,\n        timestampLastUse: this._collection[id].getTimestampLastUse()\n      }\n    }\n\n    idTs.sort((a, b) => a.timestampLastUse - a.timestampLastUse)\n    return idTs\n  }\n\n\n  _clean() {\n    console.time('_getAllTimestampLastUse')\n    let idTs = this._getAllTimestampLastUse()\n    console.timeEnd('_getAllTimestampLastUse')\n\n    for(let i=0; i<idTs.length; i++) {\n      let id = idTs[i].id\n      this.deleteChunk(id)\n\n      if(this._totalByteSize <= this._thresholdByteSize){\n        break\n      }\n    }\n  }\n\n\n  _computeByteSize() {\n    let that = this\n    let ids = Object.keys(this._collection)\n    let byteSize = 0\n    for(let i=0; i<ids.length; i++) {\n      byteSize += this._collection[ids[i]].getByteSize()\n    }\n\n    this._totalByteSize = byteSize\n  }\n\n}\n\n\nexport default ChunkCollection\n","import ChunkCollection from './ChunkCollection'\n\nexport default ({\n  ChunkCollection, \n})\n"],"names":[],"mappings":"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"}